/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface EventInterface extends utils.Interface {
  functions: {
    "approveEventManager(address)": FunctionFragment;
    "createEvent(string,string,string,string,uint64,uint256,uint256)": FunctionFragment;
    "getApprovedEventManager(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "viewEventDetails(uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveEventManager"
      | "createEvent"
      | "getApprovedEventManager"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "viewEventDetails"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveEventManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedEventManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewEventDetails",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveEventManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedEventManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewEventDetails",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "NewEvent(uint256,string,string,string,string,address,uint64,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewEventEventObject {
  eventId: BigNumber;
  name: string;
  location: string;
  description: string;
  image: string;
  eventManager: string;
  priceUnit: BigNumber;
  startDay: BigNumber;
  endDay: BigNumber;
}
export type NewEventEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  NewEventEventObject
>;

export type NewEventEventFilter = TypedEventFilter<NewEventEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Event extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveEventManager(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEvent(
      name_: PromiseOrValue<string>,
      location_: PromiseOrValue<string>,
      description_: PromiseOrValue<string>,
      image_: PromiseOrValue<string>,
      priceUnit_: PromiseOrValue<BigNumberish>,
      startDate_: PromiseOrValue<BigNumberish>,
      endDate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApprovedEventManager(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    viewEventDetails(
      eventID_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;
  };

  approveEventManager(
    address_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEvent(
    name_: PromiseOrValue<string>,
    location_: PromiseOrValue<string>,
    description_: PromiseOrValue<string>,
    image_: PromiseOrValue<string>,
    priceUnit_: PromiseOrValue<BigNumberish>,
    startDate_: PromiseOrValue<BigNumberish>,
    endDate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApprovedEventManager(
    address_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  viewEventDetails(
    eventID_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;

  callStatic: {
    approveEventManager(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createEvent(
      name_: PromiseOrValue<string>,
      location_: PromiseOrValue<string>,
      description_: PromiseOrValue<string>,
      image_: PromiseOrValue<string>,
      priceUnit_: PromiseOrValue<BigNumberish>,
      startDate_: PromiseOrValue<BigNumberish>,
      endDate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedEventManager(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    viewEventDetails(
      eventID_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewEvent(uint256,string,string,string,string,address,uint64,uint256,uint256)"(
      eventId?: null,
      name?: null,
      location?: null,
      description?: null,
      image?: null,
      eventManager?: null,
      priceUnit?: null,
      startDay?: null,
      endDay?: null
    ): NewEventEventFilter;
    NewEvent(
      eventId?: null,
      name?: null,
      location?: null,
      description?: null,
      image?: null,
      eventManager?: null,
      priceUnit?: null,
      startDay?: null,
      endDay?: null
    ): NewEventEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    approveEventManager(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEvent(
      name_: PromiseOrValue<string>,
      location_: PromiseOrValue<string>,
      description_: PromiseOrValue<string>,
      image_: PromiseOrValue<string>,
      priceUnit_: PromiseOrValue<BigNumberish>,
      startDate_: PromiseOrValue<BigNumberish>,
      endDate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApprovedEventManager(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    viewEventDetails(
      eventID_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveEventManager(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEvent(
      name_: PromiseOrValue<string>,
      location_: PromiseOrValue<string>,
      description_: PromiseOrValue<string>,
      image_: PromiseOrValue<string>,
      priceUnit_: PromiseOrValue<BigNumberish>,
      startDate_: PromiseOrValue<BigNumberish>,
      endDate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApprovedEventManager(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    viewEventDetails(
      eventID_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
